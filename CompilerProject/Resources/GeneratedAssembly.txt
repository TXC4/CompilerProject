section .text

global _start

read:
mov eax, 3
mov ebx, 2
mov ecx, num
mov edx, 6
int 0x80

convertStrToInt:
mov ax, 0
mov [readInt], ax
mov ecx, num
mov bx, 0
mov bl, byte [ecx]

next:
sub bl, '0'
mov ax, [readInt]
mov dx, 10
mul dx
add ax, bx
mov [readInt], ax
mov bx, 0
add ecx, 1
mov bl, byte [ecx]
cmp bl, 0xA
jne next
ret

convertIntToStr:
mov ebx, resultValue + 4
convertLoop:
sub dx, dx
mov cx, 10
div cx
add dl, '0'
mov [ebx], dl
dec ebx
cmp ebx, resultValue
jge convertLoop
mov [printString], ebx
ret 

promptUser:
push ax
push dx
mov eax, 4
mov ebx, 1
mov ecx, userMsg
mov edx, lenUserMsg
int 0x80
pop dx
pop ax
ret

write: ;writes contents of ecx
mov eax, 4
mov ebx, 1
mov ecx, [printString]
mov edx, 6
int 0x80
ret 

getInt:
call promptUser
call read
mov [inInt], eax
mov ax, [inInt]
ret

printInt:
call convertIntToStr
call write
ret

exit:
mov eax, 1
mov ebx, 0
int 0x80

section .data
userMsg: db "Enter integer less than 32,765: "
lenUserMsg: equ $-userMsg
displayMsg: db "You entered: "
lenDisplayMsg: equ $-displayMsg
newline: db 0xA
ten: db 10
result: db "Answer = "
resultEnd: equ $-result
resultValue: db "aaaaa"
db "0xA"
num: db "abcdef"
numEnd: equ $-num

section .bss
tempChar resb 1
testChar resb 1
readInt resw 1
tempInt resw 1
negFlag resb 1
printString resw 1
inInt resw 1
relationFlag resb 1

section .bss

T0 resw 1
T1 resw 1
T2 resw 1
T3 resw 1
T4 resw 1
T5 resw 1
T6 resw 1
T7 resw 1
T8 resw 1
T9 resw 1
section .text 
_start:

section .text

call getInt
mov [X], ax

call getInt
mov [Y], ax

call getInt
mov [Z], ax


mov ax, 0
mov [relationFlag], ax
mov ax, [X]
cmp ax, [Y]
jle L1
mov ax, 1
mov [relationFlag], ax
L1:

mov eax, [relationFlag]
cmp ax, 0
je L0

mov ax, 0
mov [relationFlag], ax
mov ax, [X]
cmp ax, [Z]
jle L3
mov ax, 1
mov [relationFlag], ax
L3:

mov eax, [relationFlag]
cmp ax, 0
je L2
mov ax, [X]
call printInt

L2:

L0:


mov ax, 0
mov [relationFlag], ax
mov ax, [Y]
cmp ax, [X]
jle L5
mov ax, 1
mov [relationFlag], ax
L5:

mov eax, [relationFlag]
cmp ax, 0
je L4

mov ax, 0
mov [relationFlag], ax
mov ax, [Y]
cmp ax, [X]
jle L7
mov ax, 1
mov [relationFlag], ax
L7:

mov eax, [relationFlag]
cmp ax, 0
je L6

mov ax, 0
mov [relationFlag], ax
mov ax, [Z]
cmp ax, [Y]
jle L9
mov ax, 1
mov [relationFlag], ax
L9:

mov eax, [relationFlag]
cmp ax, 0
je L8
mov ax, [Z]
call printInt

L8:

L6:

L4:

mov ax, 1
int 0x80

section .bss

X resw 1

Y resw 1

Z resw 1

Temp resw 1

