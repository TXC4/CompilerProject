section .text

global _start

read:
mov eax, 3
mov ebx, 2
mov ecx, num
mov edx, 6
int 0x80

convertStrToInt:
mov ax, 0
mov [readInt], ax
mov ecx, num
mov bx, 0
mov bl, byte [ecx]

next:
sub bl, '0'
mov ax, [readInt]
mov dx, 10
mul dx
add ax, bx
mov [readInt], ax
mov bx, 0
add ecx, 1
mov bl, byte [ecx]
cmp bl, 0xA
jne next
ret

convertIntToStr:
mov ebx, resultValue + 4
convertLoop:
sub dx, dx
mov cx, 10
div cx
add dl, '0'
mov [ebx], dl
dec ebx
cmp ebx, resultValue
jge convertLoop
mov [printString], ebx
ret 

promptUser:
push ax
push dx
mov eax, 4
mov ebx, 1
mov ecx, userMsg
mov edx, lenUserMsg
int 0x80
pop dx
pop ax
ret

write: ;writes contents of ecx
mov eax, 4
mov ebx, 1
mov ecx, [printString]
mov edx, 6
int 0x80
ret 

exit:
mov eax, 1
mov ebx, 0
int 0x80

section .data
userMsg: db "Enter integer less than 32,765: "
lenUserMsg: equ $-userMsg
displayMsg: db "You entered: "
lenDisplayMsg: equ $-displayMsg
newline: db 0xA
ten: db 10
result: db "Answer = "
resultEnd: equ $-result
resultValue: db "aaaaa"
db "0xA"
num: db "abcdef"
numEnd: equ $-num

section .bss
tempChar resb 1
testChar resb 1
readInt resw 1
tempInt resw 1
negFlag resb 1
printString resw 1

section .bss

T0 resw 1
T1 resw 1
T2 resw 1
T3 resw 1
T4 resw 1


section .text 
_start:

section .text

mov ax, 5
mov [X], word ax

W0:

mov ax, [X]
cmp ax, 1
jge L0

mov ax, [X]
sub ax, 1
mov [T0], ax

mov ax, [T0]
mov [X], word ax

jmp W0
L0: NOP

mov ax, 1
int 0x80

section .bss

X resw 1

